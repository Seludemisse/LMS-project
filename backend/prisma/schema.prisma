// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        String       @default("user") // default to "user" if not specified
  phone       String? // optional, matches frontend
  major       String?
  year        String?
  studentId   String?
  bio         String?
  address     String?
  dateOfBirth DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Submissions Submission[]
  assignments Assignment[]
  exam        Exam[]
  examResult  ExamResult[]
}

model Assignment {
  id          Int          @id @default(autoincrement())
  title       String
  subject     String
  description String
  dueDate     DateTime
  priority    String?      @default("Medium")
  status      String       @default("Pending")
  completed   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  Submissions Submission[]
}

model Submission {
  id           Int        @id @default(autoincrement())
  content      String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
}
model Exam {
  id        Int     @id @default(autoincrement())
  subject   String
  title     String
  date      String
  time      String
  location  String
  duration  String
  status    String   // Upcoming | Completed | Cancelled
  priority  String    // High | Medium | Low
  createdBy Int
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  results   ExamResult[]
  }
model ExamResult {
  id     Int  @id @default(autoincrement())
  score  Int
  examId Int
  userId Int
  createdAt DateTime @default(now())
  details String?

  exam   Exam @relation(fields: [examId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}